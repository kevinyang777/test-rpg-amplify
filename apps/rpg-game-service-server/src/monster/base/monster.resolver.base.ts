/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Monster } from "./Monster";
import { MonsterCountArgs } from "./MonsterCountArgs";
import { MonsterFindManyArgs } from "./MonsterFindManyArgs";
import { MonsterFindUniqueArgs } from "./MonsterFindUniqueArgs";
import { CreateMonsterArgs } from "./CreateMonsterArgs";
import { UpdateMonsterArgs } from "./UpdateMonsterArgs";
import { DeleteMonsterArgs } from "./DeleteMonsterArgs";
import { MonsterDto } from "../MonsterDto";
import { MonsterService } from "../monster.service";
@graphql.Resolver(() => Monster)
export class MonsterResolverBase {
  constructor(protected readonly service: MonsterService) {}

  async _monstersMeta(
    @graphql.Args() args: MonsterCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Monster])
  async monsters(
    @graphql.Args() args: MonsterFindManyArgs
  ): Promise<Monster[]> {
    return this.service.monsters(args);
  }

  @graphql.Query(() => Monster, { nullable: true })
  async monster(
    @graphql.Args() args: MonsterFindUniqueArgs
  ): Promise<Monster | null> {
    const result = await this.service.monster(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Monster)
  async createMonster(
    @graphql.Args() args: CreateMonsterArgs
  ): Promise<Monster> {
    return await this.service.createMonster({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Monster)
  async updateMonster(
    @graphql.Args() args: UpdateMonsterArgs
  ): Promise<Monster | null> {
    try {
      return await this.service.updateMonster({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Monster)
  async deleteMonster(
    @graphql.Args() args: DeleteMonsterArgs
  ): Promise<Monster | null> {
    try {
      return await this.service.deleteMonster(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MonsterDto)
  async FightMonster(
    @graphql.Args()
    args: MonsterDto
  ): Promise<MonsterDto> {
    return this.service.FightMonster(args);
  }
}
